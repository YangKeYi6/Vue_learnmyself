<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <script src="../code/lib/2.6.11vue.js"></script>
    <link rel="stylesheet" href="../code/lib/bootstrap.css">
</head>

<body>
    <div id="app">
        <!-- 这是上面的一部分 -->
        <div class="panel panel-primary">
            <!-- 添加品牌的div标签 -->
            <div class="panel-heading">
                <h3 class="panel-title">添加品牌</h3>
            </div>
            <!-- 输入  id 和  name 以及   btn   的div标签 -->
            <div class="panel-body form-inline form-control">
                <label for="">
                      id:
                      <input type="text"  v-model="id" class="form-control">
                  </label>

                <label for="">
                    name:
                    <input type="text" v-model="name" class="form-control">
                </label>

                <input type="button" value="添加" class="btn btn-primay" @click="add()">
                <label for="">搜索名称关键字：
                    <input type="text" class="form-control" v-model="keywords"> 
                </label>
            </div>
        </div>

        <!-- 这是下面的部分 -->
        <table class="table table-bordered table-hover table-striped">
            <thead>
                <tr>
                    <th>id</th>
                    <th>name</th>
                    <th>ctime</th>
                    <th>operation</th>
                </tr>
            </thead>
            <tbody>
                <!-- 这里的search()方法是把list数组里面符合条件的数组添加到newList中来 -->
                <tr v-for="item in search(keywords)" :key="list.id">
                    <td>{{item.id}}</td>
                    <td v-text="item.name"></td>
                    <td>{{item.ctime}}</td>
                    <td><a href="" @click.prevent="del(item.id)">删除</a></td>
                </tr>
            </tbody>
        </table>
    </div>
    <script>
        var vm = new Vue({
            el: '#app',
            data: {
                id: '',
                name: '',
                keywords: '',
                list: [{
                    id: 1,
                    name: '宝马',
                    ctime: new Date()
                }, {
                    id: 2,
                    name: '五菱宏光',
                    ctime: new Date()
                }, {
                    id: 3,
                    name: '奔驰',
                    ctime: new Date()
                }]
            },
            methods: {
                add() { //添加的方法
                    // console.log("132")
                    // 分析：
                    // 1.id和name直接在data上面获取
                    // 2.建立一个新的list对象
                    // 3.把这个新建立的对象 利用数组操作 增加到data里面的数据中来
                    // 4.在Vue中，数据是双向绑定的，我们修改了data上的数据，会被自动同步到页面上，不需要重新渲染新出现的dom元素
                    // 5.我们更多的是进行Vm 中Model数据的操作，在操作Model数据的时候会涉及额一些业务逻辑

                    var car = {
                        id: this.id,
                        name: this.name,
                        ctime: new Date()
                    }
                    this.list.push(car)
                    this.id = ''
                    this.name = ''
                },
                del(id) { //根据id删除数据
                    // this.list.some((item, i) => {
                    //     if (item.id == id) {
                    //         this.list.splice(i, 1)
                    //         return true
                    //     }
                    // })
                    var index = this.list.findIndex(item => {
                        if (item.id == id) {
                            return true
                        }
                        n
                    })
                    this.list.splice(index, 1)
                },
                search(keywords) { //根据关键字查找数组
                    // // return this.list
                    // var newList = []
                    // this.list.forEach(item => {
                    //     if (item.name.indexOf(keywords) != -1) {
                    //         newList.push(item)
                    //     }
                    // })
                    // return newList


                    // 注意：  some forEach  filter findIndex 这些都属于数组的新方法
                    // 都会对数组的每一项进行遍历 执行相关操作


                    //在es6中  为字符串提供了一个新方法  叫做  String.prototype.includes("要包含的字符串")

                    //如果包含，返回true  反之  faluse
                    var newList = []

                    return this.list.filter(item => {
                        // if(item.name.indexOf(keywords) != -1)
                        if (item.name.includes(keywords)) {
                            return item
                        }
                    })

                }
            },

        });
    </script>
</body>

</html>