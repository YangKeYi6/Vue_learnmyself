<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <script src="../code/lib/2.6.11vue.js"></script>
    <link rel="stylesheet" href="../code/lib/bootstrap.css">
</head>

<body>
    <div id="app">
        <!-- 这是上面的一部分 -->
        <div class="panel panel-primary">
            <!-- 添加品牌的div标签 -->
            <div class="panel-heading">
                <h3 class="panel-title">添加品牌</h3>
            </div>
            <!-- 输入  id 和  name 以及   btn   的div标签 -->
            <div class="panel-body form-inline form-control">
                <label for="">
                      id:
                      <input type="text"  v-model="id" class="form-control">
                  </label>

                <label for="">
                    name:
                    <input type="text" v-model="name" class="form-control" @keyup.instead="add()">
                </label>

                <input type="button" value="添加" class="btn btn-primay" @click="add()">
                <label for="">搜索名称关键字：
                    <input type="text" class="form-control" v-model="keywords" v-focus v-color = "'yellow'"> 
                </label>
            </div>
        </div>

        <!-- 这是下面的部分 -->
        <table class="table table-bordered table-hover table-striped">
            <thead>
                <tr>
                    <th>id</th>
                    <th>name</th>
                    <th>ctime</th>
                    <th>operation</th>
                </tr>
            </thead>
            <tbody>
                <!-- 这里的search()方法是把list数组里面符合条件的数组添加到newList中来 -->
                <tr v-for="item in search(keywords)" :key="list.id">
                    <td>{{item.id}}</td>
                    <td v-text="item.name"></td>
                    <td>{{item.ctime | dateFormat("yyy-mm-dd")}}</td>
                    <td><a href="" @click.prevent="del(item.id)">删除</a></td>
                </tr>
            </tbody>
        </table>
    </div>

    <div id="app1">


        <p>{{1+1}}</p>
        <p v-color="'red'" v-fontweight="900" v-fontsize="'30'">{{ dt | dateFormat("")}}</p>
    </div>

    <script>
        Vue.directive("color", {
            bind: function(el, binding) {
                //样式，只要通过指令绑定给了元素，不管这个元素有没有被插入到页面中去，这个元素就会有一个内联的样式
                //将来  样式肯定会显示到页面中   这时候  浏览器就会解析样式 并应用到页面中来
                // el.style.color = 'red'
                el.style.color = binding.value
            }
        })

        var vm2 = new Vue({
                el: '#app1',
                data: {
                    dt: new Date()
                },
                methods: {},
                filters: { //定义私有过滤器   过滤器有两个条件   {过滤器名称，函数}
                    //过滤器调用的时候，有就近原则  如果在全局和单个vm实例里面有同名的  过滤器 单个vm调用就会使用私有的filter
                    dateFormat(dateStr, pattern) {

                        var dt = new Date(dateStr)
                        var y = dt.getFullYear()

                        //String.padStart()    String.padEnd()   新方法
                        var m = (dt.getMonth() + 1).toString().padStart(2, '0')
                        var d = dt.getDate().toString().padStart(2, '0')

                        if (pattern && pattern.toLowerCase() == 'yyyy-mm-dd') {
                            return `${y}-${m}-${d}`
                        } else {
                            var hh = dt.getHours().toString().padStart(2, '0')
                            var mm = dt.getMinutes().toString().padStart(2, '0')
                            var ss = dt.getSeconds().toString().padStart(2, '0')
                            console.log(hh + '---' + mm + '----' + ss)
                            return `${y}-${m}-${d} ${hh}:${mm}:${ss} =====`
                        }
                    }
                },
                //自定义私有指令  包含【指令的名称  函数具体实现】
                directives: {
                    'fontweight': {
                        bind: function(el, binding) {
                            el.style.fontWeight = binding.value
                        }
                    },
                    //这个function相当于直接写到bind和updated中
                    'fontsize': function(el, binding) {
                        el.style.fontSize = parseInt(binding.value) + 'px'
                    }
                }
            })
            // 全局的过滤器，进行时间的格式化


        //键盘上按键对应的数字，自定义键盘修饰符
        Vue.config.keyCodes.instead = 113

        // 使用 Vue.directive() 定义全局的指令 v-foucs
        // 其中 参数1：指令的名称  注意：在定义的时候 指令的前面不需要添加  “v-” 前缀
        // 但是 调用的时候 必须在指令前面加上 v- 前缀来进行调用
        //参数2：是一个对象，这个对象上 有一些指令相关的函数 这些函数可以在特定的阶段执行相关的操作
        //所谓的全局过滤器，所有的vm实例都可以使用

        Vue.directive("focus", {
            // 样式相关的都在bind里面
            // bind: function(el) { //每当指令绑定到元素上的时候，会立即执行这个bind函数，只执行一次
            //     //注意：在每个函数中，第一个参数，永远是 el  表示被绑定了指令的那个元素，这个el参数是一个原生的js对象
            //     //在元素刚绑定了指令的时候  还没有 插入倒DOM中去，这时候，调用focus方法没有作用
            //     //因为 一个元素只有插入DOM之后才会获取焦点
            //     //     el.focus()
            // },
            inserted: function(el) { //inserted 表示元素 插入到DOM中的时候，会执行inserted函数【触发一次】
                // 与行为相关的就用inserted   防止js行为不生效
                el.focus()
            },
            updated: function() { //当VNode更新的时候，会执行 uodated，可能触发多次

            }
        })

        // 自定义的设置字体颜色的指令

        Vue.filter('dateFormat', function(dateStr, pattern) {
                //根据给定的时间字符串，得到特定时间
                var dt = new Date(dateStr)
                var y = dt.getFullYear()
                var m = dt.getMonth() + 1
                var d = dt.getDate()

                if (pattern && pattern.toLowerCase() == 'yyyy-mm-dd') {
                    return `${y}-${m}-${d}`
                } else {
                    var hh = dt.getHours()
                    var mm = dt.getMinutes()
                    var ss = dt.getSeconds()
                    console.log(hh + '---' + mm + '----' + ss)
                    return `${y}-${m}-${d} ${hh}:${mm}:${ss}`
                }
            }) //yyyy-mm-dd



        var vm = new Vue({
            el: '#app',
            data: {
                id: '',
                name: '',
                keywords: '',
                list: [{
                    id: 1,
                    name: '宝马',
                    ctime: new Date()
                }, {
                    id: 2,
                    name: '五菱宏光',
                    ctime: new Date()
                }, {
                    id: 3,
                    name: '奔驰',
                    ctime: new Date()
                }]
            },
            methods: {
                add() { //添加的方法
                    // console.log("132")
                    // 分析：
                    // 1.id和name直接在data上面获取
                    // 2.建立一个新的list对象
                    // 3.把这个新建立的对象 利用数组操作 增加到data里面的数据中来
                    // 4.在Vue中，数据是双向绑定的，我们修改了data上的数据，会被自动同步到页面上，不需要重新渲染新出现的dom元素
                    // 5.我们更多的是进行Vm 中Model数据的操作，在操作Model数据的时候会涉及额一些业务逻辑
                    var car = {
                        id: this.id,
                        name: this.name,
                        ctime: new Date()
                    }
                    this.list.push(car)
                    this.id = ''
                    this.name = ''
                },
                del(id) { //根据id删除数据
                    // this.list.some((item, i) => {
                    //     if (item.id == id) {
                    //         this.list.splice(i, 1)
                    //         return true
                    //     }
                    // })
                    var index = this.list.findIndex(item => {
                        if (item.id == id) {
                            return true
                        }
                        n
                    })
                    this.list.splice(index, 1)
                },
                search(keywords) { //根据关键字查找数组
                    // // return this.list
                    // var newList = []
                    // this.list.forEach(item => {
                    //     if (item.name.indexOf(keywords) != -1) {
                    //         newList.push(item)
                    //     }
                    // })
                    // return newList


                    // 注意：  some forEach  filter findIndex 这些都属于数组的新方法
                    // 都会对数组的每一项进行遍历 执行相关操作


                    //在es6中  为字符串提供了一个新方法  叫做  String.prototype.includes("要包含的字符串")

                    //如果包含，返回true  反之  faluse
                    var newList = []

                    return this.list.filter(item => {
                        // if(item.name.indexOf(keywords) != -1)
                        if (item.name.includes(keywords)) {
                            return item
                        }
                    })

                }
            },

        });
        // 过滤器的定义的语法


        //过滤器中的function，第一个参数规定为   过滤器  管道符  前面传递过来的数据
        // Vue.filter('过滤器的名称',function(data){
        //     return data + '123'
        // })
    </script>
</body>

</html>


<!-- 过滤器调用的时候的格式  {{ name | 过滤器的名称 }} -->